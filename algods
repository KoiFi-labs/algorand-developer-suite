#!/usr/bin/env node

const chalk = require('chalk');
const args = process.argv;
const { usage, createAccountUsage, createAppUsage, callAppUsage } = require('./utils/usageFunctions')
const sandboxService = require('./services/sandboxService')
const accountsService = require('./services/accountsService')
const appsService = require('./services/appsService')
const txnsService = require('./services/txnsService')

const commands = ['startnet', 'stopnet', 'getaccount', 'createaccount', 'listaccounts', 'help', 'createapp']

// used to log errors to the console in red color
function errorLog(error) {
  const eLog = chalk.red(error)
  console.log(eLog)
}

// if (commands.indexOf(args[2]) == -1) {
//   errorLog('invalid command passed')
//   usage()
// }

const processGetAccountInstruction = () => {
  if (!args[3]) {
    errorLog('Missing options')
    createAccountUsage()  
  } else if (args[3] === '-a') {
    accountsService.getAccount(args[4]).then((res) => {
      if (!res.ok) {
        errorLog(res.msg)
        createAccountUsage()
      } else console.log(res.msg)
    })
  } else if (args[3] === '-h') { 
    createAccountUsage()
  } else {
    errorLog('Invalid option')
    createAccountUsage()
  }
}

const processFundAccountInstruction = () => {
  if (args.length < 6) {
    errorLog('Missing options')
    fundAccountUsage()
  } else if (args[3] === '-a' && args[5] === '-amt') {
    accountsService.fundAccount(args[4], args[6]).then((res) => {
      if (!res.ok) {
        errorLog(res.msg)
      } else console.log(res.msg)
    })
  } else if (args[3] === '-h') { 
    createAccountUsage()
  } else {
    errorLog('Invalid option')
    createAccountUsage()
  }
}

const processListAccountsInstruction = () => {
  accountsService.listAccounts().then((res) => {
    if (!res.ok) {
      errorLog(res.msg)
    } else console.log(res.msg)
  })
}

const getAppData = (appName) => {
  const stateData = require(`./apps/${appName}/${appName}.json`)
  const data = {
    'approvalProgram': `${appName}.teal`,
    'clearProgram': 'clear.teal',
    'stateData': {
      'globalByteSlices': stateData.numGlobalByteSlices,
      'globalInts': stateData.numGlobalInts,
      'localByteSlices': stateData.numLocalByteSlices,
      'localInts': stateData.numLocalInts,
    },
    'parameters': stateData.parameters
  }
  return data

}

const processCreateAppInstruction = () => {
  if (!args[3]) {
    errorLog('Missing options')
    createAppUsage()  
  } else if (args[3] === '-creator' && args[5] === '-app') {
    const appData = getAppData(args[6])
    sandboxService.createApp({
      'appName': args[6],
      'creatorAddress': args[4],
      'approvalProgram': appData.approvalProgram,
      'clearProgram': appData.clearProgram,
      'globalByteSlices': appData.stateData.globalByteSlices,
      'globalInts': appData.stateData.globalInts,
      'localByteSlices': appData.stateData.localByteSlices,
      'localInts': appData.stateData.localInts
    })
  } else if (args[3] === '-h') { 
    createAppUsage()
  } else {
    errorLog('Invalid options')
    createAppUsage()
  }
}

const processCallAppInstruction = () => {
  // required options
  if (!args[4] || !args[6] || !args[8]) {
    errorLog('Missing options')
    callAppUsage()
  } else if (args[3] === '-app' && args[5] === '-f' && args[7] === '-oc') {
    // valid options
    const txn = {
      appId: args[4],
      from: args[6],
      onComplete: args[8]
    }
    if (args[9] === '-args' && args[10] !== undefined) txn.appArgs = args[10]
    txnsService.callApp(txn)
  } else if (args[3] === '-h') { 
    // options for help
    callAppUsage()
  } else {
    errorLog('Invalid options')
    callAppUsage()
  }
}

const processCreateAccountInstruction = () => {
  accountsService.createAccount().then((res) => {
    if (!res.ok) {
      errorLog(res.msg)
    } else {
      console.log(res.msg)
    }
  })
}

switch(args[2]) {
  case 'help':
    usage();
    break
  case 'startnet':
    sandboxService.startNetwork();
    break
  case 'stopnet':
    sandboxService.stopNetwork();
    break
  case 'getaccount':
    processGetAccountInstruction();
    break
  case 'createaccount':
    processCreateAccountInstruction();
    break
  case 'fundaccount':
    processFundAccountInstruction();
    break
  case 'listaccounts':
    processListAccountsInstruction();
    break
  case 'createapp':
    processCreateAppInstruction();
    break
  case 'callapp':
    processCallAppInstruction();
    break
  case undefined:
    usage();
    break
  default:
    errorLog('invalid command passed');
    usage();
}